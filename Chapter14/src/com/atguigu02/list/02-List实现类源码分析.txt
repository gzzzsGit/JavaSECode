
一、ArrayList
1. ArrayList的特点：
底层使用Object[]数组存储

线程不安全的


2. ArrayList源码解析：
2.1 jdk7版本：(以jdk1.7.0_07为例)

//如下代码的执行:底层会初始化数组，数组的默认长度为10。0bject[] elementData = new 0bject[10];
ArrayList<String> list = new ArrayList<>();

list.add( "AA"); //elementData[0] = "AA";
list.add("BB"); //elementData[1] ="BB";
...
当要添加第11个元素的时候，底层的elementData数组已满，则需要扩容。默认扩容为原来长度的1.5倍。并将原有数组中的元素复制到新的数组中。




2.2 jdk8版本:(以jdk1.8.0_271为例)
//如下代码的执行:底层会初始化数组。0bject[] elementData = new 0bject[]{};
ArrayList<String> list = new ArrayList<>();

list.add( "AA"); //首次添加元素时，会初始化数组elementData = new 0bject[10]; elementData[0] = "AA";
list.add("BB"); //elementData[1] ="BB";
...
当要添加第11个元素的时候，底层的elementData数组已满，则需要扩容。默认扩容为原来长度的1.5倍。并将原有数组中的元素复制到新的数组中。



小结：
jdk1.7.0_07版本中，ArrayList类似于饿汉式
jdk1.8.0_271版本中，ArrayList类似于懒汉式

二、Vector
1. Vector的特点：
底层使用Object[]数组存储

线程安全的


2. Vector源码解析：(以jdk1.8.0_271为例)
//如下代码的执行:底层会初始化数组，数组的默认长度为10。0bject[] elementData = new 0bject[10];
Vector list = new Vector();

list.add( "AA");
list.add("BB");
//...
//当要添加第11个元素的时候，底层的elementData数组已满，则需要扩容。默认扩容为原来长度的2倍。并将原有数组中的元素复制到新的数组中。





三、LinkedList
1. LinkedList的特点：
底层使用双向列表存储

线程不安全的


2. LinkedList在jdk8中的源码解析：
LinkedList<String> list = new LinkedList<>();
list.add( "AA"); //将"AA"封装到一个Node对象1中，list对象的属性first、last都指向此Node对象;
list.add("BB"); //将"BB"封装到一个Node对象2中，对象1和对象2构成一个双向列表，list对象的属性last都指向此Node对象2;

LinkedList内部的Node类定义
    private static class Node<E> {
        E item;
        Node<E> next;
        Node<E> prev;

        Node(Node<E> prev, E element, Node<E> next) {
            this.item = element;
            this.next = next;
            this.prev = prev;
        }
    }
3. LinkedList是否存在扩容问题？


四、启示与开发建议



