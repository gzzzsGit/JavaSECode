
一、HashMap
1. HashMap中元素的特点



2. HashMap源码解析
2.1 jdk7中创建对象和添加数据过程(以JDK1.7.0_07为例说明)：
//创建对象的过程中，底层会初始化数组Entry[] table = new Entry[16];
HashMap<String,Integer> map = new HashMap<>();
...
map.put("AA",78);将"AA"和78封装成一个Entry对象中，考虑将此对象添加进table数组
...


添加/修改的过程:
将(key1,value1)添加到当前的map中:
首先，需要调用key1所在类的hashCode()方法，计算key1对应的哈希值1，此哈希值1经过某种算法(hash())之后，得到哈希值2。哈希值2再经过某种算法(indexFor())之后，就确定了(key1, value1)在数组table中的索引位置i。
1.1 如果此索引位置i的数组上没有元素，则(key1, value1)添加成功。---->情况1
1.2如果此索引位置i的数组上有元素(key2,value2),则需要继续比较key1和key2的哈希值2--->哈希冲突
2.1如果key1的哈希值2与key2的哈希值2不相同，则(key1, value1)添加成功。---->情况2
2.2如果key1的哈希值2与key2的哈希值2相同，则需要继续比较key1和key2的equals()。要调用key1所在类的equals(),将key2作为参数传递进去。
3.1调用equals()，返回false:则(key1,value1)添加成功。 ---->情况3
3.2调用equals()，返回true:则认为key1和key2是相同的。默认情况下，value1替换原有的value2。


说明:情况1:将(key1,value1)存放到数组的索引i的位置
情况2,，情况3: (key1,value1)元素与现有的(key2,value2)构成单向链表结构，〔key1, value1)指向(key2,value2)


随着不断的添加元素，在满足如下的条件的情况下，会考虑扩容（防止链表过长导致查找效率低）:
(size >= threshold) && (null != table[i])//table[i]如果等于null，说明该数组位置还没存元素，直接存就行，不会形成链表
当元素的个数达到临界值(->数组的长度*加载因子)时，就考虑扩容。默认的临界值 = 16 * 0.75 -->12
默认扩容为原来的2倍。




2.2 jdk8与jdk7的不同之处(以jdk1.8.0_271为例)：



2.3 属性/字段：



二、LinkedHashMap
1. LinkedHashMap 与 HashMap 的关系:
> LinkedHashMap在HashMap使用的数组+单向链表+红黑树的基础上，又增加了一对双向链表，记录添加的(key ,value)6先后顺序。便于我们遍历所有的key-value。

LinkedHashMap重写了HashMap的如下方法：
    Node<K,V> newNode(int hash, K key, V value, Node<K,V> e) {
        LinkedHashMap.Entry<K,V> p =
            new LinkedHashMap.Entry<>(hash, key, value, e);
        linkNodeLast(p);
        return p;
    }


2. 底层结构：
LinkedHashMap内部定义了一个Entry
static class Entry<K,V> extends HashMap.Node<K,V> {
        Entry<K,V> before, after;//增加的一对双向链表
        Entry(int hash, K key, V value, Node<K,V> next) {
            super(hash, key, value, next);
        }
    }
三、HashSet和LinkedHashSet的源码分析


